:py:mod:`pyrestsdk.middleware.authorizationhandler`
===================================================

.. py:module:: pyrestsdk.middleware.authorizationhandler

.. autoapi-nested-parse::

   Authorization Handlers



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   _basic_authorization_handler/index.rst
   _kerbose_authorization_handler/index.rst
   _token_authorization_handler/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pyrestsdk.middleware.authorizationhandler.BasicAuthorizationHandler
   pyrestsdk.middleware.authorizationhandler.TokenAuthorizationHandler
   pyrestsdk.middleware.authorizationhandler.KerboseAuthorizationHandler




.. py:class:: BasicAuthorizationHandler(credential: T, **kwargs)

   Bases: :py:obj:`pyrestsdk.middleware._base_authorization_handler.BaseAuthorizationHandler`

   Basic Authoziation Handler Type

   .. py:attribute:: credential
      :type: T

      

   .. py:method:: send(request: requests.PreparedRequest, stream: bool = False, timeout: Optional[Union[float, Tuple[float, float], Tuple[float, None]]] = None, verify: bool = True, cert: Optional[Union[bytes, str, Tuple[Union[bytes, str], Union[bytes, str]]]] = None, proxies: Optional[Mapping[str, str]] = None) -> requests.Response

      Makes a network request if next is none, otherwise requests the next middleware to do so

      Args:
          request (PreparedRequest): The network request

      Returns:
          Response: Response from network request


   .. py:method:: _get_basic_auth(/) -> str

      Gets the encoded string from the credential's get_basic() function

      Returns:
          str: The encoded string



.. py:class:: TokenAuthorizationHandler(credential: T, **kwargs)

   Bases: :py:obj:`pyrestsdk.middleware._base_authorization_handler.BaseAuthorizationHandler`

   Token Authorization Handler Type

   .. py:attribute:: credential
      :type: T

      

   .. py:method:: send(request: requests.PreparedRequest, stream: bool = False, timeout: Optional[Union[float, Tuple[float, float], Tuple[float, None]]] = None, verify: bool = True, cert: Optional[Union[bytes, str, Tuple[Union[bytes, str], Union[bytes, str]]]] = None, proxies: Optional[Mapping[str, str]] = None) -> requests.Response

      Makes a network request if next is none, otherwise requests the next middleware to do so

      Args:
          request (PreparedRequest): The network request

      Returns:
          Response: Response from network request


   .. py:method:: _get_access_token(*args, **kwargs) -> str

      Gets the token from the credential's get_token() function

      Returns:
          str: The token



.. py:class:: KerboseAuthorizationHandler(credential: T, **kwargs)

   Bases: :py:obj:`pyrestsdk.middleware.BaseAuthorizationHandler`

   Kerbose Authorization Handler Type

   .. py:attribute:: credential
      :type: T

      

   .. py:method:: send(request: requests.PreparedRequest, stream: bool = False, timeout: Optional[Union[float, Tuple[float, float], Tuple[float, None]]] = None, verify: bool = True, cert: Optional[Union[bytes, str, Tuple[Union[bytes, str], Union[bytes, str]]]] = None, proxies: Optional[Mapping[str, str]] = None) -> requests.Response

      Makes a network request if next is none, otherwise requests the next middleware to do so

      Args:
          request (PreparedRequest): The network request

      Returns:
          Response: Response from network request


   .. py:method:: _get_principle() -> str

      Gets the encoded string from the credential's get_principle() function



